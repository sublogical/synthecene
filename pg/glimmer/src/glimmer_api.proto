syntax = "proto3";

package glimmer_api;

import "google/protobuf/struct.proto"; // Import for using map types

// Agent management messages
message Agent {
    string id = 1;
    AgentStatus status = 2;
    map<string, string> properties = 3;
}

enum AgentStatus {
    AGENT_STATUS_UNSPECIFIED = 0;
    AGENT_STATUS_RUNNING = 1;
    AGENT_STATUS_PAUSED = 2;
    AGENT_STATUS_STOPPED = 3;
}

message CreateAgentRequest {
    string id = 1;
    oneof optional_template {
        string template_uri = 2;
    }
    map<string, string> override_parameters = 3;
}

message ListAgentsRequest {
}

message ListAgentsResponse {
    repeated Agent agents = 1;
}

message GetAgentRequest {
    string id = 1;
}

message DeleteAgentRequest {
    string id = 1;
}

// Property management messages
message GetPropertiesRequest {
    string agent_id = 1;
}

message GetPropertyRequest {
    string agent_id = 1;
    string key = 2;
}

message SetPropertyRequest {
    string agent_id = 1;
    string key = 2;
    string value = 3;
}

message DeletePropertyRequest {
    string agent_id = 1;
    string key = 2;
}

// Lifecycle management messages
message AgentLifecycleRequest {
    string agent_id = 1;
}

// Channel management messages
message CreateChannelRequest {
    string agent_id = 1;
    string channel_id = 2;
}

message GetChannelRequest {
    string agent_id = 1;
    string channel_id = 2;
}

message DeleteChannelRequest {
    string agent_id = 1;
    string channel_id = 2;
}

message ChannelMessage {
    string agent_id = 1;
    string channel_id = 2;
    string content = 3;
    int64 timestamp = 4;
}

// Common response messages
message AgentResponse {
    bool success = 1;
    string message = 2;
    Agent agent = 3;
}

message PropertyResponse {
    bool success = 1;
    string message = 2;
    map<string, string> properties = 3;
}

message ChannelResponse {
    bool success = 1;
    string message = 2;
    string channel_id = 3;
}

message HealthCheckRequest {
}

message HealthCheckResponse {
    bool status = 1;
    string message = 2;
}

service Glimmer {
    // Health check
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

    // Agent management
    rpc CreateAgent(CreateAgentRequest) returns (AgentResponse) {}
    rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {}
    rpc GetAgent(GetAgentRequest) returns (AgentResponse) {}
    rpc DeleteAgent(DeleteAgentRequest) returns (AgentResponse) {}

    // Property management
    rpc GetProperties(GetPropertiesRequest) returns (PropertyResponse) {}
    rpc GetProperty(GetPropertyRequest) returns (PropertyResponse) {}
    rpc SetProperty(SetPropertyRequest) returns (PropertyResponse) {}
    rpc DeleteProperty(DeletePropertyRequest) returns (PropertyResponse) {}

    // Lifecycle management
    rpc StartAgent(AgentLifecycleRequest) returns (AgentResponse) {}
    rpc PauseAgent(AgentLifecycleRequest) returns (AgentResponse) {}
    rpc StopAgent(AgentLifecycleRequest) returns (AgentResponse) {}

    // Channel management
    rpc CreateChannel(CreateChannelRequest) returns (ChannelResponse) {}
    rpc GetChannel(GetChannelRequest) returns (ChannelResponse) {}
    rpc DeleteChannel(DeleteChannelRequest) returns (ChannelResponse) {}
    rpc StreamChannel(GetChannelRequest) returns (stream ChannelMessage) {}
}

