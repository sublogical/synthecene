syntax = "proto3";

package glimmer_api;

message NotificationRequest {}

message NotificationResponse {
    string message = 1;
    string notification_type = 2;
    int64 timestamp = 3;
}

message ContextRequest {
    string url = 1;
    string title = 2;
    string content = 3;
    int64 timestamp = 4;
}

message ContextResponse {
    bool success = 1;
    string message = 2;
}

message ChannelRequest {
}

message ChannelMessage {
    string channel_id = 1;
    string content = 2;
    int64 timestamp = 3;
    string sender_id = 4;
    MessageType type = 5;
}

message ChannelResponse {
    string channel_id = 1;
    ResponseType type = 2;
    string message = 3;
    int64 timestamp = 4;
}

enum MessageType {
    MESSAGE_TYPE_UNSPECIFIED = 0;
    MESSAGE_TYPE_JOIN = 1;
    MESSAGE_TYPE_LEAVE = 2;
    MESSAGE_TYPE_CHAT = 3;
    MESSAGE_TYPE_SYNC = 4;
}

enum ResponseType {
    RESPONSE_TYPE_UNSPECIFIED = 0;
    RESPONSE_TYPE_ACK = 1;
    RESPONSE_TYPE_ERROR = 2;
    RESPONSE_TYPE_SYNC = 3;
} 

service Glimmer {
    // Stream of notifications from the server to the client
    rpc GetNotifications (NotificationRequest) returns (stream NotificationResponse) {}

    // Report the current context to the server
    rpc ReportContext (ContextRequest) returns (ContextResponse) {}

    // Bidirectional streaming for channel synchronization
    rpc SyncChannel (stream ChannelMessage) returns (stream ChannelResponse) {}
}

